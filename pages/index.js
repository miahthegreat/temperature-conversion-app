import Head from "next/head";
import { useState } from "react";
import FromTempSelection from "../components/FromTempSelection";
import { convertCelsius, convertFahrenheit, convertKelvin } from "../helpers";
import { motion } from "framer-motion";

export default function Home() {
  const [measurement, setMeasurement] = useState(null);
  const [convertedTemps, setConvertedTemps] = useState([]);
  const [temp, setTemp] = useState(null);

  const handleChange = (e) => {
    setTemp(e.target.value);
    if (measurement === "Kelvin")
      setConvertedTemps(convertKelvin(parseInt(e.target.value)));
    if (measurement === "Celsius")
      setConvertedTemps(convertCelsius(parseInt(e.target.value)));
    if (measurement === "Fahrenheit")
      setConvertedTemps(convertFahrenheit(parseInt(e.target.value)));
  };

  return (
    <>
      <Head>
        <title>Temperature Conversion App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative space-y-4">
        <motion.div
          className="bg-green-50 overflow-hidden shadow sm:rounded-lg z-50"
          initial={{
            x: "100vw",
            opacity: 0,
          }}
          animate={{
            x: 0,
            opacity: 1,
            transition: {
              duration: 0.5,
              type: "spring",
            },
          }}
        >
          <div className="px-4 py-5 sm:p-6">
            <h1 className="text-3xl font-bold underline mb-4">
              Temperature Conversion
            </h1>
            <FromTempSelection
              set={setMeasurement}
              temp={temp}
              setConvertedTemps={setConvertedTemps}
            />
          </div>
        </motion.div>
        {measurement && (
          <motion.div
            className="p-6 bg-green-50 overflow-hidden shadow sm:rounded-lg space-y-6 -z-10"
            initial={{
              y: -125,
              opacity: 0,
            }}
            animate={{
              y: 0,
              opacity: 1,
              transition: {
                duration: 0.5,
                type: "spring",
              },
            }}
          >
            <p>Converting from {measurement}</p>
            <div className="w-1/2 relative border border-gray-300 rounded-md px-3 py-2 shadow-sm focus-within:ring-1 focus-within:ring-indigo-600 focus-within:border-indigo-600">
              <label
                htmlFor="name"
                className="absolute -top-2 left-2 -mt-px inline-block px-1 bg-green-50 text-xs font-medium text-gray-900"
              >
                Temperature
              </label>
              <input
                type="number"
                name="temperature"
                id="temperature"
                className="bg-green-50 block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm"
                placeholder="Enter the temperature..."
                onChange={handleChange}
              />
            </div>
          </motion.div>
        )}
        {convertedTemps && temp
          ? convertedTemps.map((t, idx) => (
              <motion.div
                key={idx}
                className="p-6 bg-green-50 overflow-hidden shadow sm:rounded-lg space-y-6 -z-20"
                initial={{
                  y: -125,
                  opacity: 0,
                }}
                animate={{
                  y: 0,
                  opacity: 1,
                  transition: {
                    duration: 0.5,
                    type: "spring",
                  },
                }}
              >
                <p>
                  {temp}&deg;{measurement.charAt(0)} is {Math.round(t.temp)}
                  &deg;{t.measurement.charAt(0)}
                </p>
              </motion.div>
            ))
          : null}
      </div>
    </>
  );
}
